{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Informatii generale V-Rage este un framework gratuit pentru RAGE:MP care are ca scop oferirea unor resurse plug & play. Licente Utilizarea framework-ului este gratuita si este bazata pe o licenta. Licenta se poate genera din control panel-ul dev.v-rage.com , pe baza unui cont. Fiecare cont poate avea maxim o licenta pentru server si una pentru localhost (vezi diferenta aici: Tipuri de licente ) Chiar daca framework-ul este gratuit, licentele sunt obigatorii pentru folosirea lui. Tipuri de licente localhost Permite folosirea framework-ului si accesarea API-ului de pe orice IP. In cazul in care framework-ul a mai fost folosit si conexiunea la API-ul V-Rage nu este posibila, serverul va porni cu ultima versiune descarcata. Serverul va fi limitat la 15 playeri. server Permite folosirea framework-ului si accesarea API-ului doar de pe IP-ul introdus in control panel-ul V-Rage (IP-ul serverului). In cazul in care conectarea la API-ul V-Rage nu este posibila, nu va porni deloc. Serverul nu va avea limitari legate de numarul playeri. Licente multiple Deocamdata, oferim in mod gratuit doar doua licente, cum a fost mentionat mai sus. In cazul in care este necesara extinderea (de ex. doua servere pe aceeasi comunitate care ruleaza V-Rage), ne puteti contacta pentru a achizitiona multiple licente pentru servere. (!) Sunt interzise conturile multiple cu scopul de a trece peste aceasta limitare. Incalcarea acestei reguli poate duce la suspendarea tuturor conturilor","title":"Informatii generale"},{"location":"#informatii-generale","text":"V-Rage este un framework gratuit pentru RAGE:MP care are ca scop oferirea unor resurse plug & play.","title":"Informatii generale"},{"location":"#licente","text":"Utilizarea framework-ului este gratuita si este bazata pe o licenta. Licenta se poate genera din control panel-ul dev.v-rage.com , pe baza unui cont. Fiecare cont poate avea maxim o licenta pentru server si una pentru localhost (vezi diferenta aici: Tipuri de licente ) Chiar daca framework-ul este gratuit, licentele sunt obigatorii pentru folosirea lui.","title":"Licente"},{"location":"#tipuri-de-licente","text":"localhost Permite folosirea framework-ului si accesarea API-ului de pe orice IP. In cazul in care framework-ul a mai fost folosit si conexiunea la API-ul V-Rage nu este posibila, serverul va porni cu ultima versiune descarcata. Serverul va fi limitat la 15 playeri. server Permite folosirea framework-ului si accesarea API-ului doar de pe IP-ul introdus in control panel-ul V-Rage (IP-ul serverului). In cazul in care conectarea la API-ul V-Rage nu este posibila, nu va porni deloc. Serverul nu va avea limitari legate de numarul playeri.","title":"Tipuri de licente"},{"location":"#licente-multiple","text":"Deocamdata, oferim in mod gratuit doar doua licente, cum a fost mentionat mai sus. In cazul in care este necesara extinderea (de ex. doua servere pe aceeasi comunitate care ruleaza V-Rage), ne puteti contacta pentru a achizitiona multiple licente pentru servere. (!) Sunt interzise conturile multiple cu scopul de a trece peste aceasta limitare. Incalcarea acestei reguli poate duce la suspendarea tuturor conturilor","title":"Licente multiple"},{"location":"dialog/","text":"Casete de dialog Initializarea unui dialog Initializarea unui dialog pentru un player se face cu urmatoarea functie: player.vrage.dialog(header, elements, buttons, response) Argumente: header: (String) Textul ce va aparea in bara de sus a dialogului elements: (Object) Fiecare element ce va aparea in componenta dialogului. Documentat in #dialog:elements buttons: (Array) Un array cu butoanele din josul dialogului, care vor putea fi apasate ca un raspuns. response (Function) Functia care se va apela dupa ce playerul apasa un buton in dialog (sau ESC / Enter). Documentat in #dialog:response dialog:elements Acest argument este un obiect ce reprezinta elementele din componenta dialogului. Numele key-urilor vor fi returnate in functia response, alaturi de valoarea introdusa de user (text in cazul input, list_item in cazul unei liste). Fiecare key trebuie sa fie egal cu una dintre cele 3 clase pentru elemente: DialogText (String: text) Acest element va afisa un simplu text in dialog. Culoarea acestuia poate fi modificata folosind {culoare} (Ex: {ffffff} sau {white} ) text: new DialogText('Text informativ') DialogInput (String: label, Bool isPassword = false) Acest element va afisa un camp de input, in care playerul va putea scrie. Parametrul label reprezinta un text informativ pus in camp care va disparea in momentul in care playerul va incepe sa scrie. Parametrul isPassword este optional si setat default ca false. Daca este setat pe true, toate caracterele din input vor avea un preview de genul: \u2022\u2022\u2022\u2022\u2022\u2022 username: new DialogInput('User'), password: new DialogInput('Password', true), DialogList (Array: items, Bool isTable = false, String tableHeader = \"\") Acest element va afisa o lista, din care playerul va putea alege un rand. Parametrul items reprezinta obiectele listei. Parametrul isTable indica daca este vorba de o lista tabel si trebuie aliniate obiectele de pe fiecare rand, folosind \\t . Parametrul tableHeader reprezinta numele fiecarei coloane in cazul in care isTable este true. list: new DialogList(['Primul element', 'Al doilea element'], isTable=false, tableHeader=\"\") dialog:response functia response are ca singurul parametru input , reprezentand optiunile din elementele dialogului si id-ul butonului apasat. Variabila input este un obiect. Fiecare key corespunde key-ului elementului initializat, iar raspunsul este in functie de clasa elementului. DialogText: nu exista DialogInput: textul introdus in caseta de input DialogList: randul selectat de player (incepand cu 0) De asemenea, aceasta prezinta si key-ul button care corespunde id-ului butonului apasat. Exemplu final player.vrage.dialog('Inregistreaza cont', { text: new DialogText('Introdu mai jos {yellow}informatiile.'), username: new DialogInput('User'), password: new DialogInput('Password', true), text2: new DialogText('Alege sexul:'), list: new DialogList([ 'Barbat', 'Femeie ]); }, ['Continua', 'Inapoi'], (input) => { //codul se executa dupa ce playerul raspunde if(input.button === 1){ console.log(`A renuntat la selectie`); return 1; } console.log(`Username-ul este ${input.username}`); console.log(`Parola are ${input.password.length} caractere`); if(input.list === 0) console.log('Este barbat`); else if(input.list === 1) console.log('Este femeie`); } );","title":"Casete de dialog"},{"location":"dialog/#casete-de-dialog","text":"","title":"Casete de dialog"},{"location":"dialog/#initializarea-unui-dialog","text":"Initializarea unui dialog pentru un player se face cu urmatoarea functie: player.vrage.dialog(header, elements, buttons, response) Argumente: header: (String) Textul ce va aparea in bara de sus a dialogului elements: (Object) Fiecare element ce va aparea in componenta dialogului. Documentat in #dialog:elements buttons: (Array) Un array cu butoanele din josul dialogului, care vor putea fi apasate ca un raspuns. response (Function) Functia care se va apela dupa ce playerul apasa un buton in dialog (sau ESC / Enter). Documentat in #dialog:response","title":"Initializarea unui dialog"},{"location":"dialog/#dialogelements","text":"Acest argument este un obiect ce reprezinta elementele din componenta dialogului. Numele key-urilor vor fi returnate in functia response, alaturi de valoarea introdusa de user (text in cazul input, list_item in cazul unei liste). Fiecare key trebuie sa fie egal cu una dintre cele 3 clase pentru elemente:","title":"dialog:elements"},{"location":"dialog/#dialogtext-string-text","text":"Acest element va afisa un simplu text in dialog. Culoarea acestuia poate fi modificata folosind {culoare} (Ex: {ffffff} sau {white} ) text: new DialogText('Text informativ')","title":"DialogText (String: text)"},{"location":"dialog/#dialoginput-string-label-bool-ispassword-false","text":"Acest element va afisa un camp de input, in care playerul va putea scrie. Parametrul label reprezinta un text informativ pus in camp care va disparea in momentul in care playerul va incepe sa scrie. Parametrul isPassword este optional si setat default ca false. Daca este setat pe true, toate caracterele din input vor avea un preview de genul: \u2022\u2022\u2022\u2022\u2022\u2022 username: new DialogInput('User'), password: new DialogInput('Password', true),","title":"DialogInput (String: label, Bool isPassword = false)"},{"location":"dialog/#dialoglist-array-items-bool-istable-false-string-tableheader","text":"Acest element va afisa o lista, din care playerul va putea alege un rand. Parametrul items reprezinta obiectele listei. Parametrul isTable indica daca este vorba de o lista tabel si trebuie aliniate obiectele de pe fiecare rand, folosind \\t . Parametrul tableHeader reprezinta numele fiecarei coloane in cazul in care isTable este true. list: new DialogList(['Primul element', 'Al doilea element'], isTable=false, tableHeader=\"\")","title":"DialogList (Array: items, Bool isTable = false, String tableHeader = \"\")"},{"location":"dialog/#dialogresponse","text":"functia response are ca singurul parametru input , reprezentand optiunile din elementele dialogului si id-ul butonului apasat. Variabila input este un obiect. Fiecare key corespunde key-ului elementului initializat, iar raspunsul este in functie de clasa elementului. DialogText: nu exista DialogInput: textul introdus in caseta de input DialogList: randul selectat de player (incepand cu 0) De asemenea, aceasta prezinta si key-ul button care corespunde id-ului butonului apasat.","title":"dialog:response"},{"location":"dialog/#exemplu-final","text":"player.vrage.dialog('Inregistreaza cont', { text: new DialogText('Introdu mai jos {yellow}informatiile.'), username: new DialogInput('User'), password: new DialogInput('Password', true), text2: new DialogText('Alege sexul:'), list: new DialogList([ 'Barbat', 'Femeie ]); }, ['Continua', 'Inapoi'], (input) => { //codul se executa dupa ce playerul raspunde if(input.button === 1){ console.log(`A renuntat la selectie`); return 1; } console.log(`Username-ul este ${input.username}`); console.log(`Parola are ${input.password.length} caractere`); if(input.list === 0) console.log('Este barbat`); else if(input.list === 1) console.log('Este femeie`); } );","title":"Exemplu final"},{"location":"install/","text":"Instalare & Update Instalarea consta in 2 parti: descarcarea updater-ului si initializarea acestuia in cod. Updater-ul poate fi descarcat prin 2 metode, prezentat mai jos. Dupa descarcarea updater-ului, initializarea framework-ului in cod se documenteaza in #initializare-si-configurare Descarcarea din NPM (recomandat) Aceasta metoda este indisponibila momentan Descarcarea manuala Pentru inceput, este necesara descarcarea fisierului updater.js din control panel-ul dev.v-rage.com . Este recomandata folosirea unei singure resurse (un singur folder in packages) care sa foloseasca V-Rage, deoarece framework-ul trebuie intotdeauna sa fie incarcat inainte de restul codului. Creati un sub-folder in folder-ul packages numit v-rage si copiati fisierul updater.js acolo (a.i. packages/v-rage/updater.js ) Initializare si configurare Dupa ce updater-ul a fost instalat, putem initializa V-Rage Framework. Creati un fisier numit index.js in folderul resursei v-rage (a.i. packages/v-rage/index.js ). Pentru a incarca updater-ul, folositi unul din urmatoarele snippet-uri, in functie de modul in care ati descarcat updater-ul. Pentru descarcarea din npm: global.VRage = require('v-rage-updater'); Pentru descarcarea manuala: global.VRage = require('./updater.js'); In urma acestui cod, V-Rage Updater a fost incarcat in mod global pentru toate script-urile care vor rula. Dupa incarcarea updater-ului, folositi functia init( licence ) a updater-ului pentru a incarca framework-ul (si a-l updata). Licenta poate fi gasita in control panel-ul dev.v-rage.com , dupa logare. Exemplu: VRage.init(\"abcde-12345\"); Acum puteti deschide server-ul, cu V-Rage Framework incarcat. Daca licenta este corecta si totul merge ok, consola va afisa urmatorul text: [V-RAGE] Authentification successful. Update Fie ca este prima data dupa instalare sau este facuta automat din cauza unei noi versiuni, update-ul se face automat in momentul in care serverul este pornit. V-Rage isi poate updata script-ul pentru server si cel pentru client in mod independent. Server Daca server-ul primeste un update, acesta se va face automat, iar serverul va rula in continuare. Dupa gasirea versiunii noi, se va afisa in consola: [V-RAGE] SERVER: A new version is avaliable, V-RAGE Server will update. Dupa finalizarea update-ului, se va afisa in consola: [V-RAGE] SERVER: Update successful. Serverul va rula cu noua versiune. Client Daca client-ul primeste un update, acesta se va face automat, iar serverul va necesita un restart pentru aplicarea acestuia. Dupa gasirea versiunii noi, se va afisa in consola: [V-RAGE] Client: A new version is avaliable, V-RAGE Client will update. Dupa finalizarea update-ului, se va afisa in consola: [V-RAGE] Client: Update successful. [V-RAGE] V-Rage Client has updated and you need to restart your server to apply the update. Please restart your server. Serverul va fi blocat pentru a primi un restart. Pentru a-l reporni, inchide fereastra consolei sau apasa de 2 ori combinatia de taste CTRL + C . Dupa restartarea server-ului, in consola se va afisa: [V-RAGE] V-Rage Client started on version x.x.x. x.x.x va fi inclouit de numarul versiunii . Serverul va rula in continuare cu ultima versiune de V-Rage. Incarcarea script-urilor Toate script-urile bazate pe V-Rage Framework trebuie initializare in functia onStart() . Aceasta este documentata intr-o pagina separata (click) Exemplu final global.VRage = require('./updater.js'); VRage.init(\"abcde-12345\");","title":"Instalare & Update"},{"location":"install/#instalare-update","text":"Instalarea consta in 2 parti: descarcarea updater-ului si initializarea acestuia in cod. Updater-ul poate fi descarcat prin 2 metode, prezentat mai jos. Dupa descarcarea updater-ului, initializarea framework-ului in cod se documenteaza in #initializare-si-configurare","title":"Instalare &amp; Update"},{"location":"install/#descarcarea-din-npm-recomandat","text":"Aceasta metoda este indisponibila momentan","title":"Descarcarea din NPM (recomandat)"},{"location":"install/#descarcarea-manuala","text":"Pentru inceput, este necesara descarcarea fisierului updater.js din control panel-ul dev.v-rage.com . Este recomandata folosirea unei singure resurse (un singur folder in packages) care sa foloseasca V-Rage, deoarece framework-ul trebuie intotdeauna sa fie incarcat inainte de restul codului. Creati un sub-folder in folder-ul packages numit v-rage si copiati fisierul updater.js acolo (a.i. packages/v-rage/updater.js )","title":"Descarcarea manuala"},{"location":"install/#initializare-si-configurare","text":"Dupa ce updater-ul a fost instalat, putem initializa V-Rage Framework. Creati un fisier numit index.js in folderul resursei v-rage (a.i. packages/v-rage/index.js ). Pentru a incarca updater-ul, folositi unul din urmatoarele snippet-uri, in functie de modul in care ati descarcat updater-ul. Pentru descarcarea din npm: global.VRage = require('v-rage-updater'); Pentru descarcarea manuala: global.VRage = require('./updater.js'); In urma acestui cod, V-Rage Updater a fost incarcat in mod global pentru toate script-urile care vor rula. Dupa incarcarea updater-ului, folositi functia init( licence ) a updater-ului pentru a incarca framework-ul (si a-l updata). Licenta poate fi gasita in control panel-ul dev.v-rage.com , dupa logare. Exemplu: VRage.init(\"abcde-12345\"); Acum puteti deschide server-ul, cu V-Rage Framework incarcat. Daca licenta este corecta si totul merge ok, consola va afisa urmatorul text: [V-RAGE] Authentification successful.","title":"Initializare si configurare"},{"location":"install/#update","text":"Fie ca este prima data dupa instalare sau este facuta automat din cauza unei noi versiuni, update-ul se face automat in momentul in care serverul este pornit. V-Rage isi poate updata script-ul pentru server si cel pentru client in mod independent.","title":"Update"},{"location":"install/#server","text":"Daca server-ul primeste un update, acesta se va face automat, iar serverul va rula in continuare. Dupa gasirea versiunii noi, se va afisa in consola: [V-RAGE] SERVER: A new version is avaliable, V-RAGE Server will update. Dupa finalizarea update-ului, se va afisa in consola: [V-RAGE] SERVER: Update successful. Serverul va rula cu noua versiune.","title":"Server"},{"location":"install/#client","text":"Daca client-ul primeste un update, acesta se va face automat, iar serverul va necesita un restart pentru aplicarea acestuia. Dupa gasirea versiunii noi, se va afisa in consola: [V-RAGE] Client: A new version is avaliable, V-RAGE Client will update. Dupa finalizarea update-ului, se va afisa in consola: [V-RAGE] Client: Update successful. [V-RAGE] V-Rage Client has updated and you need to restart your server to apply the update. Please restart your server. Serverul va fi blocat pentru a primi un restart. Pentru a-l reporni, inchide fereastra consolei sau apasa de 2 ori combinatia de taste CTRL + C . Dupa restartarea server-ului, in consola se va afisa: [V-RAGE] V-Rage Client started on version x.x.x. x.x.x va fi inclouit de numarul versiunii . Serverul va rula in continuare cu ultima versiune de V-Rage.","title":"Client"},{"location":"install/#incarcarea-script-urilor","text":"Toate script-urile bazate pe V-Rage Framework trebuie initializare in functia onStart() . Aceasta este documentata intr-o pagina separata (click)","title":"Incarcarea script-urilor"},{"location":"install/#exemplu-final","text":"global.VRage = require('./updater.js'); VRage.init(\"abcde-12345\");","title":"Exemplu final"},{"location":"onstart/","text":"Functia onStart Functia onStart este functia care se apeleaza dupa incarcarea tuturor script-urilor V-Rage. Orice cod scris in afara ei bazat pe V-Rage nu se poate rula. Aceasta trebuie definita dupa initializarea updater-ului ( global.VRage = require(...) ) si verificarea licentei ( VRage.init( ... ) ). Definirea ei se face in modul urmator: VRage.onStart = () =>{ //codul rulat la initializare } Folosirea de script-uri independente, bazate pe V-Rage Pentru a avea o convenabilitate a codului, puteti creea un folder cu script-uri care vor rula dupa initializarea framework-ului. Pentru aceasta, creati un nou sub-folder in folder-ul v-rage , numit scripts (a.i. packages/v-rage/scripts ) Inauntru puteti creea un nou fisier index.js , care se va ocupa strict de codul pentru gameplay. Acesta se va putea exinde si pe mai multe script-uri, puse in acelasi folder. Continutul folder-ului packages ar trebui sa arate asa: packages -- | -- vrage.js (un fisier creat automat de updater) | -- v-rage -- | -- index.js (fisierul unde este initializat V-Rage) | -- updater.js (updater-ul in cazul instalarii manuale) | -- scripts -- | | -- index.js (fisierul unde putem scrie codul pentru gameplay) Acum, trebuie sa ii indicam framework-ului sa ruleze fisierele din folder-ul scripts . Putem face asta folosind metoda require( ) inauntrul functiei onStart . In acest caz, functia onStart mentionata mai devreme va arata asa: VRage.onStart = () =>{ require('./scripts/index.js'); } Pentru a testa codul, putem scrie ceva in consola folosind fisierul nou creat: /packages/v-rage/scripts/index.js console.log('Hello world!'); In momentul pornirii server-ului, consola va afisa textul Hello world! . Mai multe exemple pot fi gasite in pagina de exemple. Exemplu final /packages/v-rage/index.js global.VRage = require('./updater.js'); VRage.init(\"abcde-12345\"); VRage.onStart = () =>{ require('./scripts/index.js'); } /packages/v-rage/scripts/index.js console.log('Hello world!');","title":"Functia onStart"},{"location":"onstart/#functia-onstart","text":"Functia onStart este functia care se apeleaza dupa incarcarea tuturor script-urilor V-Rage. Orice cod scris in afara ei bazat pe V-Rage nu se poate rula. Aceasta trebuie definita dupa initializarea updater-ului ( global.VRage = require(...) ) si verificarea licentei ( VRage.init( ... ) ). Definirea ei se face in modul urmator: VRage.onStart = () =>{ //codul rulat la initializare }","title":"Functia onStart"},{"location":"onstart/#folosirea-de-script-uri-independente-bazate-pe-v-rage","text":"Pentru a avea o convenabilitate a codului, puteti creea un folder cu script-uri care vor rula dupa initializarea framework-ului. Pentru aceasta, creati un nou sub-folder in folder-ul v-rage , numit scripts (a.i. packages/v-rage/scripts ) Inauntru puteti creea un nou fisier index.js , care se va ocupa strict de codul pentru gameplay. Acesta se va putea exinde si pe mai multe script-uri, puse in acelasi folder. Continutul folder-ului packages ar trebui sa arate asa: packages -- | -- vrage.js (un fisier creat automat de updater) | -- v-rage -- | -- index.js (fisierul unde este initializat V-Rage) | -- updater.js (updater-ul in cazul instalarii manuale) | -- scripts -- | | -- index.js (fisierul unde putem scrie codul pentru gameplay) Acum, trebuie sa ii indicam framework-ului sa ruleze fisierele din folder-ul scripts . Putem face asta folosind metoda require( ) inauntrul functiei onStart . In acest caz, functia onStart mentionata mai devreme va arata asa: VRage.onStart = () =>{ require('./scripts/index.js'); } Pentru a testa codul, putem scrie ceva in consola folosind fisierul nou creat: /packages/v-rage/scripts/index.js console.log('Hello world!'); In momentul pornirii server-ului, consola va afisa textul Hello world! . Mai multe exemple pot fi gasite in pagina de exemple.","title":"Folosirea de script-uri independente, bazate pe V-Rage"},{"location":"onstart/#exemplu-final","text":"","title":"Exemplu final"},{"location":"onstart/#packagesv-rageindexjs","text":"global.VRage = require('./updater.js'); VRage.init(\"abcde-12345\"); VRage.onStart = () =>{ require('./scripts/index.js'); }","title":"/packages/v-rage/index.js"},{"location":"onstart/#packagesv-ragescriptsindexjs","text":"console.log('Hello world!');","title":"/packages/v-rage/scripts/index.js"},{"location":"test/","text":"PULA CALULUI For full documentation visit mkdocs.org . CV mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout fmm fmm fmm","title":"PULA CALULUI"},{"location":"test/#pula-calului","text":"For full documentation visit mkdocs.org .","title":"PULA CALULUI"},{"location":"test/#cv","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"CV"},{"location":"test/#project-layout","text":"fmm fmm fmm","title":"Project layout"}]}